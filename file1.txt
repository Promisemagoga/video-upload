import { getStorage, ref, uploadBytes } from "firebase/storage";
import { addDoc, collection } from "firebase/firestore";
import { useState } from "react";
import firebase from "firebase/compat/app";

const YourComponent = () => {
  const [videoFile, setVideoFile] = useState(null);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    setVideoFile(file);
  };

  const handleUpload = async () => {
    if (videoFile) {
      const storage = getStorage();
      const storageRef = ref(storage, "videos/" + videoFile.name);

      try {
        // Upload the video file to Firebase Storage
        await uploadBytes(storageRef, videoFile);

        // Get the download URL of the uploaded video
        const downloadURL = await storageRef.getDownloadURL();

        // Save the download URL to Firestore using addDoc
        const firestore = firebase.firestore();
        const videosCollectionRef = collection(firestore, "videos");
        await addDoc(videosCollectionRef, { url: downloadURL });

        // Reset the videoFile state
        setVideoFile(null);
      } catch (error) {
        console.error("Error uploading video:", error);
      }
    }
  };

  return (
    <div>
      <input type="file" accept="video/*" onChange={handleFileChange} />
      <button onClick={handleUpload}>Upload Video</button>
    </div>
  );
};

export default YourComponent;











const createDocument = async () => {
  const docRef = await addDoc(collection(db, "yourCollectionName"), {
    yourArrayFieldName: [{ key1: value1, key2: value2 }],
  });
  console.log("Document created with ID: ", docRef.id);
};







import { getStorage, ref, uploadBytes } from "firebase/storage";
import { addDoc, collection } from "firebase/firestore";
import { useState } from "react";
import firebase from "firebase/compat/app";

const YourComponent = () => {
  const [videoFile, setVideoFile] = useState(null);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    setVideoFile(file);
  };

  const handleUpload = async () => {
    if (videoFile) {
      const storage = getStorage();
      const storageRef = ref(storage, "videos/" + videoFile.name);

      try {
        // Upload the video file to Firebase Storage
        await uploadBytes(storageRef, videoFile);

        // Get the download URL of the uploaded video
        const downloadURL = await storageRef.getDownloadURL();

        // Save the download URL to Firestore using addDoc
        const firestore = firebase.firestore();
        const videosCollectionRef = collection(firestore, "videos");
        await addDoc(videosCollectionRef, { url: downloadURL });

        // Reset the videoFile state
        setVideoFile(null);
      } catch (error) {
        console.error("Error uploading video:", error);
      }
    }
  };

  return (
    <div>
      <input type="file" accept="video/*" onChange={handleFileChange} />
      <button onClick={handleUpload}>Upload Video</button>
    </div>
  );
};

export default YourComponent;







how to use file reader to display this videos locally using this code :  const handleFileChange = (event) => {
    for (let i = 0; i < event.target.files.length; i++) {
      const content = event.target.files[i]
      console.log(content);
      setVideos((prevState => [...prevState, content]))
    }
  };











import React, { useState } from 'react';
import firebase from 'firebase/app';
import 'firebase/firestore';
import 'firebase/storage';

const firebaseConfig = {
  // Your Firebase configuration
};

firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();
const storage = firebase.storage();

const UploadContent = () => {
  const [video, setVideo] = useState(null);
  const [uploadProgress, setUploadProgress] = useState(0);

  const handleVideoUpload = (e) => {
    const file = e.target.files[0];
    setVideo(file);
  };

  const handleContentUpload = async (courseId, moduleId) => {
    const courseRef = db.collection('courses').doc(courseId);
    const moduleRef = courseRef.collection('modules').doc(moduleId);

    if (video) {
      try {
        const storageRef = storage.ref(`videos/${video.name}`);
        const uploadTask = storageRef.put(video);

        uploadTask.on(
          'state_changed',
          (snapshot) => {
            const progress = Math.round(
              (snapshot.bytesTransferred / snapshot.totalBytes) * 100
            );
            setUploadProgress(progress);
          },
          (error) => {
            console.log(error);
          },
          () => {
            uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {
              moduleRef.update({
                content: downloadURL,
              });
            });
          }
        );
      } catch (error) {
        console.log(error);
      }
    }
  };

  return (
    <div>
      <input type="file" onChange={handleVideoUpload} />
      <button
        onClick={() => handleContentUpload('course1', 'module1')}
      >
        Upload Content
      </button>
      <progress value={uploadProgress} max="100" />
    </div>
  );
};

export default UploadContent;

